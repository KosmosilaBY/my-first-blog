http://127.0.0.1:8000/admin/login/ :
l: superuser
p: superuser123

user:
Kosmosila
Kosmos123


Pазвертывание (deploy) — это процесс публикации приложения в интернете, чтобы люди могли наконец увидеть твое творение

github.com:
l: KosmosilaBY
p: Kostik112233

www.pythonanywhere.com:
l: KosmosilaBY
p: Kostik123

$ git init
Initialized empty Git repository in ~/djangogirls/.git/
$ git config --global user.name "Your Name"
$ git config --global user.email you@example.com
Инициализировать git-репозиторий придется только один раз за проект (и тебе больше не придется вводить имя пользователя и адрес электронной почты).
Используй команду git status перед git add или в любой другой момент, когда ты не уверена, что изменения — хорошая идея. Это убережёт тебя от таких неприятных сюрпризов, как добавление неправильных файлов. Команда git status возвращает информацию обо всех ранее неотслеживаемых/изменённых/добавленных в git файлах, а также статус ветки и многое другое. 

https://github.com/KosmosilaBY/my-first-blog.git

Теперь нужно связать локальный репозиторий с репозиторием на GitHub.
Напечатай у себя в консоли следующую команду (замени <your-github-username> на имя, указанное при создании аккаунта на GitHub, но без угловых скобок):
command-line
$ git remote add origin https://github.com/KosmosilaBY/my-first-blog.git
$ git push -u origin master

Чтобы опубликовать сайт на PythonAnywhere, нужно загрузить на PythonAnywhere твой код с Github и затем настроить PythonAnywhere так, чтобы он распознал твой код и запустил твоё веб-приложение. Существуют способы сделать это «вручную», но для PythonAnywhere есть программа-помощник, которая сделает это для тебя. Давай её установим.

PythonAnywhere command-line
$ pip3.6 install --user pythonanywhere
Когда ты это запустишь, в консоли будет печататься лог установки. Он начнётся с чего-то вроде Collecting pythonanywhere, а последней будет строчка Successfully installed (...) pythonanywhere- (...).

Теперь запустим эту вспомогательную утилиту, которую ты только что установила. Она настроит твоё приложение, скачав его код с GitHub. Напечатай следующее в консоли PythonAnywhere (не забудь использовать свой ник на GitHub вместо <your-github-username>, URL в консольной команде должен совпадать с URL, используемый в команде clone):

PythonAnywhere command-line
$ pa_autoconfigure_django.py https://github.com/kosmosilaby/my-first-blog.git


Главное, на что нужно обратить внимание сейчас, — это то, что твоя база данных на PythonAnywhere никак не связана с базой данных на твоём компьютере. Поэтому там будут разные посты и разные аккаунты администраторов. Как следствие, для базы на PythonAnywhere необходимо создать аккаунт администратора так же, как ты это делала у себя локально с помощью команды createsuperuser. На PythonAnywhere заранее активировано виртуальное окружение, так что всё, что тебе нужно сделать — это запустить в консоли PythonAnhywhere команду:

PythonAnywhere command-line
(ola.pythonanywhere.com) $ python manage.py createsuperuser


Суперюзер База данных на pythonanywhere:
l: kosmosilaby
p: Kosmosila112233

Пользователь Kosmosila в БД:
l: Kosmosila
p: Kostik112233

-------------------------------------------------------------------

И ещё кое-что: публикация!
Хотелось бы увидеть всё это вживую в интернете, согласна? Давай проведём еще одно развёртывание веб-сайта на PythonAnywhere.

Commit и push кода в репозиторий GitHub
Во-первых, давай посмотрим, какие файлы были изменены с момента последнего развёртывания (выполни эти команды локально, не на PythonAnywhere):

command-line
$ git status
Убедись, что находишься в директории djangogirls, и попроси git выбрать все изменения в пределах папки:

command-line
$ git add --all .
Примечание: -all («всё») означает, что git также обратит внимание на удалённые файлы (по умолчанию он отслеживает новые/изменённые файлы). Также помни (из третьей главы), что . означает текущую директорию.

Прежде чем мы загрузим файлы, давай проверим, что именно git будет загружать (все файлы, который git готов отправить на сервер, отмечаются шрифтом зелёного цвета):

command-line
$ git status
Мы почти у цели, пришло время сохранить изменения в истории. К сохраняемой версии мы добавим небольшое сообщение, в котором кратко опишем изменения. Можешь набрать в качестве сообщения всё, что захочешь, однако полезно использовать информативную запись, так будет проще вспомнить внесённые изменения в будущем.

command-line
$ git commit -m "Changed the HTML for the site."
Примечание: убедись, что используешь двойные кавычки вокруг комментария.

После того, как мы сделали это, мы загрузим (заpush'им) изменения на GitHub:

command-line
$ git push

--------------------------------------------------------------------------------
Загружаем новый код на PythonAnywhere и перезапускаем веб-приложение
Открой вкладку "терминалы" на PythonAnywhere и переключись на уже запущенную консоль Bash (или новую). Затем набери следующую команду:
command-line
$ cd ~/my-first-blog
$ git pull
[...]
---------------------------------------------------------------------------------

Обновим статические файлы на сервере
Серверы вроде PythonAnywhere часто обрабатывают статические файлы (например, CSS) не так, как Python-файлы. Так происходит потому, что сервера могут оптимизировать их использование так, чтобы они быстрее загружались. В результате после того, как мы поменяли CSS-файлы, надо дать серверу команду обновить их. Эта команда называется collectstatic.

Начни с активации virtualenv, если окружение уже не активно (PythonAnywhere использует для этого команду workon. Она работает так же, как source myenv/bin/activate, которую ты используешь на своём компьютере.

PythonAnywhere command-line
$ workon <your-pythonanywhere-domain>.pythonanywhere.com
(ola.pythonanywhere.com)$ python manage.py collectstatic
[...]

--------------------------------------------------------------------------------















































